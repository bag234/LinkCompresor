pipeline {
    agent any

    environment {
        REGISTRY = "10.13.4.165:5500"
        IMAGE_NAME = "link-comp"
        IMAGE_TAG = "latest"

        REPO_URL = "git@github.com:bag234/LinkCompresor.git"
        REPO_BRANCH = "master"

        REMOTE_DIR = "link-comp"
        SSH_SERVER = "deploy-ssh"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', credentialsId: '9ef5277f-8146-4070-863e-73936eab46e7', url: 'git@github.com:bag234/LinkCompresor.git'
            }
        }

        stage ('java build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build & Push') {
            steps {
                script {
                    def app = docker.build("${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}")
                    docker.withRegistry("http://${REGISTRY}", "") {
                        app.push()
                    }
                }
            }
        }

        stage('Deploy') {
    steps {
        sshPublisher(
            publishers: [
                sshPublisherDesc(
                    configName: "${SSH_SERVER}",
                    transfers: [
                        sshTransfer(
                            sourceFiles: "docker-compose.yml",
                            remoteDirectory: "${REMOTE_DIR}",
                            execCommand: """
                                cd ${REMOTE_DIR} && docker compose pull && docker compose up -d --force-recreate
                            """
                        ),
                        sshTransfer(
                            sourceFiles: "nginx.conf",
                            remoteDirectory: "${REMOTE_DIR}",
                            execCommand: """
                                mv ~/${REMOTE_DIR}/nginx.conf /etc/nginx/sites-available/${REMOTE_DIR}.conf && \
                                ln -s /etc/nginx/sites-available/${REMOTE_DIR}.conf /etc/nginx/sites-enabled/${REMOTE_DIR}.conf && \
                                nginx -t && nginx -s reload
                            """
                        )
                    ],
                    usePromotionTimestamp: false,
                    useWorkspaceInPromotion: false,
                    verbose: true
                )
            ]
        )
    }
}
    }

    post {
        always {
            echo 'Pipeline finished'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}
